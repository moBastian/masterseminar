<!--Erhalten der Frage und der Auswahlmöglichkeiten-->
<%
  question = item.itemtext.split("{")[0]
  alternatives = item.itemtext.split("{")[1].split("}")[0].split(",")
%>
<div class="row" style="margin-right: 15px">
  <button style='float: right;' id="closeTest" class="endButton btn-warning" onclick="interruptMeasurement()"><strong>Quiz beenden</strong></button>
</div>

<br/>
<div class='row text-center'>
  <!--Anzeigen der Frage-->
  <div>
    <label class='control-label'><%= question %>&nbsp</label>
  </div>
</div>
<br><br>
<!--erst Zeile-->
<div class='row' id='rowButtons2' >
  <div class="col-lg-8 col-md-offset-2">
    <div class='col-lg-5 col-lg-offset-0' >
      <!--erste Auswahlmöglichkeit als Button (oben links)-->
      <div class ='row'>
        <button id='button0' type='button' class='questButton btn-default btn btn-block' onclick="nextClicked('<%= alternatives[0] %>','#button0')"><%= alternatives[0] %></button>
      </div>
    </div>
    <!--zweite Auswahlmöglichkeit als Button (oben rechts)-->
    <div class='col-lg-5 col-lg-offset-2' >
      <div class ='row'>
        <button id='button1' type='button' class='questButton btn-default btn btn-block' onclick="nextClicked('<%= alternatives[1] %>', '#button1')"><%= alternatives[1] %></button>
      </div>
    </div>
  </div>
</div>
<br/>
<!--zweite zeile-->
<div class='row' id='rowButtons2' >
  <div class="col-lg-8 col-md-offset-2">
    <div class='col-lg-5 col-lg-offset-0' >
      <!--dritte Auswahlmöglichkeit als Button (unten links)-->
      <div class ='row'>
        <button id='button2'  type='button' class='questButton btn-default btn btn-block' onclick="nextClicked('<%= alternatives[2] %>', '#button2')"><%= alternatives[2] %></button>
      </div>
    </div>
    <!--vierte Auswahlmöglichkeit als Button (unten rechts)-->
    <div class='col-lg-5 col-lg-offset-2' >
      <div class ='row'>
        <button id='button3'  type='button' class='questButton btn-default btn btn-block' onclick="nextClicked('<%= alternatives[3] %>', '#button3')"><%= alternatives[3] %></button>
      </div>
    </div>
  </div>
</div>
<br/>
<!--Button um zur nächsten Frage zu gelangen (nextItem definiert auf results/tests/Generisch)-->
<div class='row' id='rowButtons3' >
  <div class="col-lg-8 col-md-offset-3">
    <div class='col-lg-3 col-lg-offset-0' >
    </div>
    <div class='col-lg-4 col-lg-offset-0' >
      <div class ='row'>
        <button id='buttonCon' style='visibility: hidden' type='button' class='questButton btn btn-primary btn-block' onclick="nextItem()">Nächste Frage</button>
      </div>
    </div>
    <div class='col-lg-3 col-lg-offset-2' >
    </div>
  </div>
</div>


<script>
  var currentItemanswer = "<%= item.shorthand%>";
  var toggle = false;
  played_questions = played_questions +1;
  //Proband hat eine Antwort ausgewählt
  function nextClicked(answer, buttonId) {
      //Antwort nur einmalig speichern (toggle)
      if(!toggle){
          actualAnswers = actualAnswers + answer + ",";
          //Wenn Antwort richtig
          if(answer==currentItemanswer){
              //Anzahl der korrekten fragen für den testablauf erhöhen
              //Speichern, dass die frage richtig beantwortet wurde
              //Wenn Abzeichengruppe: Überprüfen, ob die erste Frage richtig beantwortet wurde und
              //ob da es eine spezielle Frage ist auch das Abzeichen anzeigen
              score = score +1;
              currentResult = currentResult + '1,';
              if(groupNumber == "2"||groupNumber == "4"){
                  checkFirstAndCorrectness();
              }
              //Wenn der Proband in der Feedbackgruppe ist, Feedback anzeigen
              if(groupNumber == "1"||groupNumber == "4" ||groupNumber == "5" ){
                  giveFeedback(true, buttonId);
              }
          }
          else {
              //Ausgewählt Antwort ist falsch
              currentResult = currentResult + '0,';
              //Wenn der Proband in der Feedbackgruppe ist Feedback anzeigen
              if(groupNumber == "1"||groupNumber == "4" ||groupNumber == "5" ){
                  giveFeedback(false, buttonId);
              }

          }
          //Speichern, wie lange gebraucht wurde für die Frage
          currentTimes = currentTimes + (new Date() - stopwatch) + ',';
          stopwatch = new Date();
          //Anzeigen des Buttons um zur nächsten Frage zu gelangen
          $('#buttonCon').css('visibility', 'visible');
      }
      toggle = true;
  };
  //Funktion um eine Messung abzubrechen
  //Für die aktuelle Frage "falsch" speichen, da die Frage gesehen aber nicht beantwortet wurde
  function interruptMeasurement () {
      if(!toggle){
          currentResult = currentResult + '0,';
      }
      //Testablauf beenden definiert auf results/tests/Generisch
      stopTest();
      $(window).unbind('keyup');
  }
  //F5 abschalten <- kein aktualisieren möglich
  $(window).keydown(function (event) {
      var key = event.charCode || event.keyCode;
      if (key == 116) {
          event.preventDefault();
      }});

  //Überprüfen ob andere Abzeichen erreicht wurden 50%, 90% oder Quizmaster definiert auf results/tests/_student_env
  if(groupNumber == "2"||groupNumber == "4"){
      checkBadges()
  }
  //Funktion um Feedback anzuzeigen
  //Wenn richtige Antwort = Angezeigter Button CSS-Klasse sucess hinzufügen, sonst danger und richtige Antwort anzeigen
  function giveFeedback(answeredCorrect, buttonId) {
      //Angeklickter Button = richtige Antwort
      if(answeredCorrect){
          $(buttonId).removeClass('btn-default');
          $(buttonId).addClass('btn-success');
      }
      else{
          //Angeklickter Button = falsche Antwort => richtige Antwort "suchen" und anzeigen
          $(buttonId).removeClass('btn-default');
          $(buttonId).addClass('btn-danger');
          if($('#button0').html() == '<%= item.shorthand%>') {
              $('#button0').removeClass('btn-default');
              $('#button0').addClass('btn-success');
          }
          else if($('#button1').html() == '<%= item.shorthand%>'){
              $('#button1').removeClass('btn-default');
              $('#button1').addClass('btn-success');
          }
          else if($('#button2').html() == '<%= item.shorthand%>'){
              $('#button2').removeClass('btn-default');
              $('#button2').addClass('btn-success');
          }
          else if($('#button3').html() == '<%= item.shorthand%>'){
              $('#button3').removeClass('btn-default');
              $('#button3').addClass('btn-success');
          }
      }
  }

  //Überprüfen ob 50%, 90% Hürde genommen wurde
  //aufgerufen in results/tests/_student_env
  function checkProgress(key, seenItemNumber) {
      var currentItemtext = "<%= raw item.itemtext%>";
      var toggle2 = true;
      //Aktuelles Item = Bekanntes Item?
      for(i=0; i<oldItems.length;i++){
          if(currentItemtext==oldItems[i]){
              toggle2 = false;
          }
      }
      //Wenn aktuelles Item nicht bekannt aufnehmen im Array
      if(toggle2){
          oldItems.push(currentItemtext)
      }
      //Wenn 50%, 90% Hürde genommen wurde entsprechendes Abzeichen vergeben
      if(oldItems.length == seenItemNumber){
          showBadge(key);
          achievementHash[key][0] = "true";
          sendAchievements()
      }
  }
  //Überprüfen ob die erste Frage richtig beantwortet wurde und Abzeichenhash senden
  //definiert auf results/tests/_student_env
  function checkFirstAndCorrectness() {
      if(achievementHash["a7"][0]!= "true") {
          showBadge("a7");
          achievementHash["a7"][0] = "true";
          sendAchievements();
      }
      //Überprüfen, welche speziele frage zu dem aktuellen testablauf gehört und
      //Abzeichen vergeben + Abzeichenhash updaten definiert auf results/tests/_student_env
      switch (testName) {
          case "Geographie":
              specialQuest = $('#question').html();
              //Spezielle Frage "Kiel-Frage"
              if(achievementHash["a18"][0]!= "true" && ("Kieler Woche"==currentItemanswer) ) {
                  showBadge("a18");
                  achievementHash["a18"][0]= "true";
                  sendAchievements();
              }
              //Spezielle Frage "Mars-Frage"
              else if(achievementHash["a9"][0]!= "true") {
                  showBadge("a9");
                  achievementHash["a9"][0]= "true";
                  sendAchievements();
              }
              break;
          //Spezielle Frage "PI-Frage"
          case "Mathe":
              if(achievementHash["a10"][0]!= "true") {
                  showBadge("a10");
                  achievementHash["a10"][0]= "true";
                  sendAchievements();
              }
              break;
          //Spezielle Frage "Karlsruhe-Frage"
          case "Politik":
              if(achievementHash["a19"][0]!= "true") {
                  showBadge("a19");
                  achievementHash["a19"][0]= "true";
                  sendAchievements();
              }
              break;
          //Spezielle Frage "Olympia-Frage"
          case "Sport":
              if(achievementHash["a20"][0]!= "true") {
                  showBadge("a20");
                  achievementHash["a20"][0]= "true";
                  sendAchievements();
              }
              break;
          //Spezielle Frage: "Fliegenpilz-Frage"
          case "Tiere&Pflanzen":
              if(achievementHash["a29"][0]!= "true") {
                  showBadge("a29");
                  achievementHash["a29"][0]= "true";
                  sendAchievements();
              }
              break;
          //Spezielle Frage: "W-Lan-Frage"
          default:
              if(achievementHash["a30"][0]!= "true") {
                  showBadge("a30");
                  achievementHash["a30"][0]= "true";
                  sendAchievements();
              }
              break;
      }

  }
</script>